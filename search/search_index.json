{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Astra\n\n\n Overview \n\n\nREST API penetration testing is complex due to continuous changes in existing APIs and addition of new APIs. Astra can be used by security engineers or developers as an integral part of their process, so they can detect and patch vulnerabilities in the initial phase of the development cycle. Astra can automatically detect and test login \n logout (Authentication API), which makes it easy for anyone to integrate this into CICD pipeline. Astra can take API collection as an input so this can also be used for testing APIs in stand-alone mode.\n\n\n Attacks Performed \n\n\n\n\nSQL Injection\n\n\nCross-site Scripting\n\n\nInformation Leakage\n\n\nBroken Authentication and Session Management\n\n\nCSRF (including Blind CSRF)\n\n\nRate limit\n\n\nCORS misconfiguration (including CORS bypass techniques)\n\n\nJWT attack\n\n\nOpen redirection", 
            "title": "Overview"
        }, 
        {
            "location": "/#welcome-to-astra", 
            "text": "", 
            "title": "Welcome to Astra"
        }, 
        {
            "location": "/#overview", 
            "text": "REST API penetration testing is complex due to continuous changes in existing APIs and addition of new APIs. Astra can be used by security engineers or developers as an integral part of their process, so they can detect and patch vulnerabilities in the initial phase of the development cycle. Astra can automatically detect and test login   logout (Authentication API), which makes it easy for anyone to integrate this into CICD pipeline. Astra can take API collection as an input so this can also be used for testing APIs in stand-alone mode.", 
            "title": "Overview"
        }, 
        {
            "location": "/#attacks-performed", 
            "text": "SQL Injection  Cross-site Scripting  Information Leakage  Broken Authentication and Session Management  CSRF (including Blind CSRF)  Rate limit  CORS misconfiguration (including CORS bypass techniques)  JWT attack  Open redirection", 
            "title": "Attacks Performed"
        }, 
        {
            "location": "/installation/", 
            "text": "Installing Astra is very straightforward. You can clone the github repo and use pip to install all the required dependencies. \n\n\n Requirement \n\n\nAs of now, Astra can be installed only on Linux and MacOS. Please make sure that your system meets the following requirements.\n\n\n- Linux or MacOS\n- Python 2.7\n- MongoDB\n\n\n\n\n Dependencies \n\n\n- requests\n- logger\n- pymongo\n- ConfigParser\n- pyjwt\n- flask\n- sqlmap\n\n\n\n\n Steps \n\n\nFollow these steps to install Astra:\n\n\n$ git clone https://github.com/flipkart-incubator/Astra\n$ cd Astra\n$ sudo pip install -r requirements.txt\n\n\n\n\nInstalling and launching Astra:\n\n\n\n\n\nNote:\n\n1. Upgrade your \npip\n to the latest version.\n\n2. After installing \nMongoDB\n, create this directory \n/data/db/\n. For more information, please refer this doc: \nhttps://docs.mongodb.com/manual/administration/install-community/", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#requirement", 
            "text": "As of now, Astra can be installed only on Linux and MacOS. Please make sure that your system meets the following requirements.  - Linux or MacOS\n- Python 2.7\n- MongoDB", 
            "title": "Requirement"
        }, 
        {
            "location": "/installation/#dependencies", 
            "text": "- requests\n- logger\n- pymongo\n- ConfigParser\n- pyjwt\n- flask\n- sqlmap", 
            "title": "Dependencies"
        }, 
        {
            "location": "/installation/#steps", 
            "text": "Follow these steps to install Astra:  $ git clone https://github.com/flipkart-incubator/Astra\n$ cd Astra\n$ sudo pip install -r requirements.txt  Installing and launching Astra:   Note: \n1. Upgrade your  pip  to the latest version. \n2. After installing  MongoDB , create this directory  /data/db/ . For more information, please refer this doc:  https://docs.mongodb.com/manual/administration/install-community/", 
            "title": "Steps"
        }, 
        {
            "location": "/usage/", 
            "text": "Once you have set up astra, you can use either CLI or web interface to start a scan.\n\n\n Astra CLI \n\n\n$ python astra.py --help\n                        _\n            /\\       | |\n           /  \\   ___| |_ _ __ __ _\n          / /\\ \\ / __| __| '__/ _` |\n         / ____ \\__ \\ |_| | | (_| |\n        /_/    \\_\\___/\\__|_|  \\__,_|\n\n\n\nusage: astra.py [-h] [-c COLLECTION_TYPE] [-n COLLECTION_NAME] [-u URL]\n                [-headers HEADERS] [-method {GET,POST,PUT,DELETE}] [-b BODY]\n                [-l LOGINURL] [-H LOGINHEADERS] [-d LOGINDATA]\n\nAstra - REST API Security testing Framework\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c COLLECTION_TYPE, --collection_type COLLECTION_TYPE\n                        Type of API collection\n  -n COLLECTION_NAME, --collection_name COLLECTION_NAME\n                        Type of API collection\n  -u URL, --url URL     URL of target API\n  -headers HEADERS, --headers HEADERS\n                        Custom headers.Example: {\ntoken\n : \n123\n}\n  -method {GET,POST,PUT,DELETE}, --method {GET,POST,PUT,DELETE}\n                        HTTP request method\n  -b BODY, --body BODY  Request body of API\n  -l LOGINURL, --loginurl LOGINURL\n                        URL of login API\n  -H LOGINHEADERS, --loginheaders LOGINHEADERS\n                        Headers should be in a dictionary format. Example:\n                        {\naccesstoken\n : \naxzvbqdadf\n}\n  -d LOGINDATA, --logindata LOGINDATA\n                        login data of API\n\n\n\n\n\nYou can use above arguments as per your need.\n\n\nExample 1:\n In order to start a scan for GET api, use the following command. \n\n\n$python astra.py -u http://localhost\n\n\nExample 2:\n In order to start a scan for POST api with request headers, use the following command. \n\n\n$python astra.py -u http://localhost -m POST --headers '{\"token\" : \"123456789\"}' --body '{\"name\" : \"astra\"}'\n\n\nExample 3:\n Astra also provides a feature to scan all the apis using \nPostman\n collection. Astra automatically detects login and logout apis and prompts the user to verify the apis.  \n\n\n$ python astra.py -n test\n                        _\n            /\\       | |\n           /  \\   ___| |_ _ __ __ _\n          / /\\ \\ / __| __| '__/ _` |\n         / ____ \\__ \\ |_| | | (_| |\n        /_/    \\_\\___/\\__|_|  \\__,_|\n\nIs it a correct login URL(y/n),http://127.0.0.1/api/login.php: y\n[+]Login successful\n\n\n\n\n\nAstra stores api login \n logout information in \nutils/config.property\n file.\n\n\nNote:\n Postman allows you to export apis as a collection and you can pass this collection to astra to start the scan. As of now, only command line interface supports API security testing via \nPostman\n collection.\n\n\n Configuring Astra\n\n\nYou can configure the attacks using \nutils/scan.property\n.  \n\n\n[scan-policy]\nattack = {\n          \ncors\n : \nn\n,\n          \nBroken auth\n : \nn\n,\n          \nRate limit\n : \nn\n,\n          \ncsrf\n : 'n',\n          \nzap\n : 'n',\n          \njwt\n : 'y',\n          \nsqli\n : 'n',\n          \nxss\n : 'n',\n          \nopen-redirection\n : \ny\n\n         }\n\n\n[modules]\ncsrftoken-names = csrf,csrftoken,xsrftoken,token,\nopen-redirection-names = url,redirect,login,logout,uri,redirection,next,returnto, return_to, origin,callback,authorize_callback, target,link\njwt_brute = Y\n\n\n\n\n Web Interface \n\n\nRun the api.py and access the web interface at http://127.0.0.1:8094\n\n\n$ cd API\n$ python api.py", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#astra-cli", 
            "text": "$ python astra.py --help\n                        _\n            /\\       | |\n           /  \\   ___| |_ _ __ __ _\n          / /\\ \\ / __| __| '__/ _` |\n         / ____ \\__ \\ |_| | | (_| |\n        /_/    \\_\\___/\\__|_|  \\__,_|\n\n\n\nusage: astra.py [-h] [-c COLLECTION_TYPE] [-n COLLECTION_NAME] [-u URL]\n                [-headers HEADERS] [-method {GET,POST,PUT,DELETE}] [-b BODY]\n                [-l LOGINURL] [-H LOGINHEADERS] [-d LOGINDATA]\n\nAstra - REST API Security testing Framework\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c COLLECTION_TYPE, --collection_type COLLECTION_TYPE\n                        Type of API collection\n  -n COLLECTION_NAME, --collection_name COLLECTION_NAME\n                        Type of API collection\n  -u URL, --url URL     URL of target API\n  -headers HEADERS, --headers HEADERS\n                        Custom headers.Example: { token  :  123 }\n  -method {GET,POST,PUT,DELETE}, --method {GET,POST,PUT,DELETE}\n                        HTTP request method\n  -b BODY, --body BODY  Request body of API\n  -l LOGINURL, --loginurl LOGINURL\n                        URL of login API\n  -H LOGINHEADERS, --loginheaders LOGINHEADERS\n                        Headers should be in a dictionary format. Example:\n                        { accesstoken  :  axzvbqdadf }\n  -d LOGINDATA, --logindata LOGINDATA\n                        login data of API  You can use above arguments as per your need.  Example 1:  In order to start a scan for GET api, use the following command.   $python astra.py -u http://localhost  Example 2:  In order to start a scan for POST api with request headers, use the following command.   $python astra.py -u http://localhost -m POST --headers '{\"token\" : \"123456789\"}' --body '{\"name\" : \"astra\"}'  Example 3:  Astra also provides a feature to scan all the apis using  Postman  collection. Astra automatically detects login and logout apis and prompts the user to verify the apis.    $ python astra.py -n test\n                        _\n            /\\       | |\n           /  \\   ___| |_ _ __ __ _\n          / /\\ \\ / __| __| '__/ _` |\n         / ____ \\__ \\ |_| | | (_| |\n        /_/    \\_\\___/\\__|_|  \\__,_|\n\nIs it a correct login URL(y/n),http://127.0.0.1/api/login.php: y\n[+]Login successful  Astra stores api login   logout information in  utils/config.property  file.  Note:  Postman allows you to export apis as a collection and you can pass this collection to astra to start the scan. As of now, only command line interface supports API security testing via  Postman  collection.", 
            "title": "Astra CLI"
        }, 
        {
            "location": "/usage/#configuring-astra", 
            "text": "You can configure the attacks using  utils/scan.property .    [scan-policy]\nattack = {\n           cors  :  n ,\n           Broken auth  :  n ,\n           Rate limit  :  n ,\n           csrf  : 'n',\n           zap  : 'n',\n           jwt  : 'y',\n           sqli  : 'n',\n           xss  : 'n',\n           open-redirection  :  y \n         }\n\n\n[modules]\ncsrftoken-names = csrf,csrftoken,xsrftoken,token,\nopen-redirection-names = url,redirect,login,logout,uri,redirection,next,returnto, return_to, origin,callback,authorize_callback, target,link\njwt_brute = Y", 
            "title": "Configuring Astra"
        }, 
        {
            "location": "/usage/#web-interface", 
            "text": "Run the api.py and access the web interface at http://127.0.0.1:8094  $ cd API\n$ python api.py", 
            "title": "Web Interface"
        }, 
        {
            "location": "/credits/", 
            "text": "We would like give a credit to the following tools and contributors.  \n\n\nsqlmap : \nhttps://github.com/sqlmapproject/sqlmap\n\n\nTeam:\n\n\n- Harsh Grover\n- Prajal Kulkarani\n- Ankur Bhargava\n- Mohan Kallepalli\n- Pardeep battu\n- Anirudh Anand\n- Divya Salu John", 
            "title": "Credits"
        }, 
        {
            "location": "/roadmap/", 
            "text": "We are continiously working on adding new modules and improvements to astra. These are the upcoming features that will be added to astra soon.  \n\n\n\n\nModules for detecing blind XXE and security header misconfiguration. \n\n\nPostman collection\n upload feature in web interface. \n\n\nConfigure astra using web interface.", 
            "title": "Roadmap"
        }
    ]
}